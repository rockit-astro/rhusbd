#!/usr/bin/env python3
#
# This file is part of the Robotic Observatory Control Kit (rockit)
#
# rockit is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rockit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rockit.  If not, see <http://www.gnu.org/licenses/>.

"""Temperature/Humidity probe"""

import argparse
import datetime
import re
import threading
import time
import traceback
import sys
import Pyro4
import serial
from rockit.common import log
from rockit.rhusb import Config

TEMPERATURE_REGEX = r'^>(?P<temperature>\d+\.\d) C\r$'
HUMIDITY_REGEX = r'^>(?P<humidity>\d+\.\d) %RH\r$'


class RHUSBDaemon:
    """Daemon class that wraps the RS232 interface"""
    def __init__(self, config):
        self._config = config
        self._lock = threading.Lock()
        self._running = True
        self._temperature_regex = re.compile(TEMPERATURE_REGEX)
        self._humidity_regex = re.compile(HUMIDITY_REGEX)
        self._latest = None
        self._port = None
        self._port_error = False

        runloop = threading.Thread(target=self.run)
        runloop.daemon = True
        runloop.start()

    def run(self):
        """Main run loop"""
        while self._running:
            # Initial setup
            try:
                self._port = serial.Serial(self._config.serial_port, self._config.serial_baud,
                                           timeout=self._config.serial_timeout)
                print('Connected to', self._config.serial_port)
                prefix = 'Restored' if self._port_error else 'Established'
                log.info(self._config.log_name, prefix + ' serial connection to RH-USB')
                self._port_error = False
            except Exception:
                traceback.print_exc(file=sys.stdout)
                print('Will retry in 10 seconds...')
                if not self._port_error:
                    log.error(self._config.log_name, 'Failed to connect to RH-USB')

                self._port_error = True

                time.sleep(10.)
                continue

            try:
                self._latest = None

                # Flush any stale state
                self._port.flushInput()
                self._port.flushOutput()

                # Main run loop
                while self._running:
                    self._port.write('C\r'.encode('ascii'))
                    temperature = self._port.readline().decode('ascii')
                    temperature_match = self._temperature_regex.match(temperature)

                    self._port.write('H\r'.encode('ascii'))
                    humidity = self._port.readline().decode('ascii')
                    humidity_match = self._humidity_regex.match(humidity)

                    if humidity_match and temperature_match:
                        with self._lock:
                            self._latest = {
                                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                                'temperature': float(temperature_match.group('temperature')),
                                'humidity': float(humidity_match.group('humidity'))
                            }

                    time.sleep(self._config.loop_delay)
            except Exception:
                traceback.print_exc(file=sys.stdout)
                self._port.close()
                print('Will retry in 10 seconds...')
                if not self._port_error:
                    log.error(self._config.log_name, 'Lost serial connection to RH-USB')
                self._port_error = True
                time.sleep(10.)

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement."""
        with self._lock:
            return self._latest


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='RH-USB Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()

    _config = Config(args.config)
    _config.daemon.launch(RHUSBDaemon(_config))
